<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, May 02, 2010, 3:37 PM -->
<!-- MuClient version 4.51 -->

<!-- Plugin "Inventory_Miniwindow_Demo" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Inventory_Miniwindow_Demo"
   author="Nick Gammon"
   id="e49156f49854904ea8b90223"
   language="Lua"
   purpose="Shows Inventory in a miniwindow"
   save_state="y"
   date_written="2010-05-02 15:35:51"
   requires="4.51"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Type "inv" to see your inventory in a miniwindow.
]]>
</description>

</plugin>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="INVENTORY"
   match="^Your (Green|Red|Blue|Purple) .+\.$"
   name="invtrigger2"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Execute ("inv", trigger_flag.OmitFromOutput)

EnableTrigger("invtrigger2", false)  -- disable trigger
DoAfterSpecial(2, "EnableTrigger ('invtrigger2', true)", sendto.script)</send>
  </trigger>
  <trigger
   enabled="y"
   group="INVENTORY"
   match="You made a *!"
   name="invtrigger3"
   send_to="12"
   sequence="100"
  >
  <send>Execute ("inv", trigger_flag.OmitFromOutput)

EnableTrigger("invtrigger3", false)  -- disable trigger
DoAfterSpecial(2, "EnableTrigger ('invtrigger3', true)", sendto.script)</send>
  </trigger>
  <trigger
   enabled="y"
   group="INVENTORY"
   match="^You (put|fit|step|pull|sling|slip|dual-wield|don|slot|hold|place|wield) .+\.$"
   name="invtrigger4"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Execute ("inv", trigger_flag.OmitFromOutput)

EnableTrigger("invtrigger4", false)  -- disable trigger
DoAfterSpecial(2, "EnableTrigger ('invtrigger4', true)", sendto.script)</send>
  </trigger>
  <trigger
   enabled="y"
   group="INVENTORY"
   match="^You (drop|get|give|buy|sell|remove|eat) .+\.$"
   name="invtrigger"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Execute ("inv", trigger_flag.OmitFromOutput)

EnableTrigger("invtrigger", false)  -- disable trigger
DoAfterSpecial(2, "EnableTrigger ('invtrigger', true)", sendto.script)</send>
  </trigger>
  <trigger
   enabled="y"
   group="INVENTORY"
   match="^You got .+$"
   name="invtrigger5"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Execute ("inv", trigger_flag.OmitFromOutput)

EnableTrigger("invtrigger5", false)  -- disable trigger
DoAfterSpecial(2, "EnableTrigger ('invtrigger5', true)", sendto.script)</send>
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   match="inv"
   enabled="y"
   send_to="12"
   sequence="100"
   omit_from_output="y"
  >
  <send>

  wait.make (function ()  -- coroutine starts here
  
-- request inventory
  Execute ("inventory", trigger_flag.OmitFromOutput)
  
  
-- wait for inventory to start
  local x = wait.match ("Inventory: *", 10, trigger_flag.OmitFromOutput)
  
  if not x then
    ColourNote ("white", "blue", "No inventory received within 10 seconds")
    return
  end -- if
  
  local inv = {}
  local max_width = WindowTextWidth (win, font, "Inventory")
  
-- loop until end of inventory
 while true do
   local line, wildcards, styles = wait.match ("*", 0, trigger_flag.OmitFromOutput)
  
-- see if end of inventory
    if string.match (line, "Items\: *") then
      break
    end -- if
  
-- save inventory line
    table.insert (inv, styles)
	
-- work out max width
    max_width = math.max (max_width, WindowTextWidth (win, font, line))
  
  end -- while loop
  
  local font_height = WindowFontInfo (win, font, 1)
  local window_width = max_width + 10
  local window_height = font_height * (#inv + 2) + 10
  
-- make window correct size
  
  WindowCreate (win, 
                 windowinfo.window_left, 
                 windowinfo.window_top, 
                 window_width, window_height,              -- width, height
                 windowinfo.window_mode,   
                 windowinfo.window_flags,
                 ColourNameToRGB "#000000") 
                   
  -- draw border testy
  WindowRectOp (win, 5, 0, 0, 0, 0, 5, ColourNameToRGB("black"))
  
  -- add the drag handler so they can move the window around
  movewindow.add_drag_handler (win, 0, 0, 0, font_height)
  
  -- heading line
  WindowText (win, font, "Inventory", 5, 5, 0, 0, ColourNameToRGB  "yellow")
  
  -- draw each inventory line
  local y = font_height * 2 + 5
  
  for i, styles in ipairs (inv) do
  
    local x = 5
    for _, style in ipairs (styles) do
	    x = x + WindowRectOp (win, 2, x, y, 0, 0, style.backcolour)
      x = x + WindowText (win, font, style.text, x, y, 0, 0, style.textcolour)
	      x = x + WindowRectOp (win, 5, 0, 0, 0, 0, 5, ColourNameToRGB("black"))
    end -- for
    y = y + font_height
  
  end -- for each inventory item
  
  -- now show the window
  WindowShow (win, true)

end)   -- end of coroutine

</send>
  </alias>

<alias
   match="noinv"
   enabled="y"
   group="INVENTORY"
   send_to="12"
   sequence="100"
  >
  <send>

local win = GetPluginID () .. "_inventory"

WindowShow (win, false)

</send>
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[

require "wait"  -- for waiting for inventory lines
require "movewindow"  -- load the movewindow.lua module

win = GetPluginID () .. "_inventory"
font = "f"

function OnPluginInstall ()

  -- install the window movement handler, get back the window position
  windowinfo = movewindow.install (win, 6)  -- default to 6 (on top right)
  
  -- make window so I can grab the font info
  WindowCreate (win, 0, 0, 0, 0, 1, 0, 0)

  -- add the font                 
  WindowFont (win, font, "Lucida Console", 9)  
    
end -- OnPluginInstall

function OnPluginSaveState ()
  -- save window current location for next time  
  movewindow.save_state (win)
end -- function OnPluginSaveState

-- show window on enable
function OnPluginEnable ()
  WindowShow (win,  true)  -- show it
end -- OnPluginEnable

-- hide window on disable
function OnPluginDisable ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginDisable

]]>
</script>


</muclient>